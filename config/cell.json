{
    "name": "cell", // experiments name
    "gpu_ids": [
        0
    ], // gpu ids list, default is single 0
    "seed": -1, // random seed, seed <0 represents randomization not used 
    "finetune_norm": false, // find the parameters to optimize
    "path": { //set every part file path
        "base_dir": "experiments", // base path for all log except resume_state
        "tb_logger": "tb_logger", // path of tensorboard logger
        "code": "code",
        "results": "results",
        "checkpoint": "checkpoint",
        "resume_state": "saved_models/cell"
        // "resume_state": experiments/train_transition_mnist_231106_211934/checkpoint // ex: 100, loading .state  and .pth from given epoch and iteration
    },
    "datasets": { // train or test
        "train": {
            "which_dataset": { // import designated dataset using arguments 
                // todo: here to construct a new dataset for image transition
                "name": [
                    "data.dataset",
                    "TransitionFlistDataset"
                ], // import Dataset() class / function(not recommend) from data.dataset.py (default is [data.dataset.py])
                "args": { // arguments to initialize dataset
                    "data_flist": "datasets/cell/train_data.flist",
                    "label_flist": "datasets/cell/train_label.flist",
                    "data_len": 200
                }
            },
            "dataloader": {
                "validation_split": 10, // percent or number 
                "args": { // arguments to initialize train_dataloader
                    "batch_size": 16, // batch size in each gpu
                    "num_workers": 16,
                    "shuffle": true,
                    "pin_memory": true,
                    "drop_last": true
                },
                "val_args": { // arguments to initialize valid_dataloader, will overwrite the parameters in train_dataloader
                    "batch_size": 16, // batch size in each gpu
                    "num_workers": 16,
                    "shuffle": false,
                    "pin_memory": true,
                    "drop_last": false
                }
            }
        },
        "test": {
            "which_dataset": { // import designated dataset using arguments 
                // todo: here to construct a new dataset for image transition
                "name": [
                    "data.dataset",
                    "TransitionFlistDataset"
                ], // import Dataset() class / function(not recommend) from data.dataset.py (default is [data.dataset.py])
                "args": { // arguments to initialize dataset
                    "data_flist": "./datasets/cell/test_data.flist",
                    "label_flist": "./datasets/cell/test_label.flist"
                }
            },
            "dataloader": {
                "args": {
                    "batch_size": 8,
                    "num_workers": 8,
                    "pin_memory": true
                }
            }
        }
    },
    "model": { // networks/metrics/losses/optimizers/lr_schedulers is a list and model is a dict
        "which_model": { // import designated  model(trainer) using arguments 
            // todo
            "name": [
                "models.model",
                "Palette"
            ], // import Model() class / function(not recommend) from models.model.py (default is [models.model.py])
            "args": {
                "sample_num": 8, // process of each image
                "task": "transition",
                // "ema_scheduler": {
                //     "ema_start": 1,
                //     "ema_iter": 1,
                //     "ema_decay": 0.9999
                // },
                "optimizers": [
                    {
                        "lr": 5e-5,
                        "weight_decay": 0
                    }
                ]
            }
        },
        "which_networks": [ // import designated list of networks using arguments
            {
                "name": [
                    "models.network",
                    "Network"
                ], // import Network() class / function(not recommend) from default file (default is [models/network.py]) 
                "args": { // arguments to initialize network
                    "init_type": "kaiming", // method can be [normal | xavier| xavier_uniform | kaiming | orthogonal], default is kaiming
                    "module_name": "guided_diffusion", // sr3 | guided_diffusion
                    // todo: unet should be modified to 128
                    "unet": {
                        "in_channel": 2,
                        "out_channel": 1,
                        "inner_channel": 64,
                        "channel_mults": [
                            2,
                            4,
                            8
                        ],
                        "attn_res": [
                            // 32,
                            16
                            // 8
                        ],
                        "num_head_channels": 32,
                        "res_blocks": 2,
                        "dropout": 0.2,
                        "image_size": 128
                    },
                    "beta_schedule": {
                        "train": {
                            "schedule": "linear",
                            "n_timestep": 2000,
                            // "n_timestep": 10, // debug
                            "linear_start": 1e-6,
                            "linear_end": 0.01
                        },
                        "test": {
                            "schedule": "linear",
                            "n_timestep": 100,
                            "linear_start": 1e-4,
                            "linear_end": 0.09
                        }
                    }
                }
            }
        ],
        "which_losses": [ // import designated list of losses without arguments
            // "mse_loss" // import mse_loss() function/class from default file (default is [models/losses.py]), equivalent to { "name": "mse_loss", "args":{}}
            "l1_loss" // import mse_loss() function/class from default file (default is [models/losses.py]), equivalent to { "name": "mse_loss", "args":{}}
        ],
        "which_metrics": [ // import designated list of metrics without arguments
            "mae", // import mae() function/class from default file (default is [models/metrics.py]), equivalent to { "name": "mae", "args":{}}
            "mse",
            "psnr",
            "ssim",
            "pearson"
        ]
    },
    "train": { // arguments for basic training
        "n_epoch": 1e8, // max epochs, not limited now
        "n_iter": 1e8, // max interations
        "val_epoch": 5, // valdation every specified number of epochs
        "save_checkpoint_epoch": 10,
        "log_iter": 1e3, // log every specified number of iterations
        "tensorboard": true // tensorboardX enable
    },
    "debug": { // arguments in debug mode, which will replace arguments in train
        "val_epoch": 1,
        "save_checkpoint_epoch": 1,
        "log_iter": 2,
        "debug_split": 50 // percent or number, change the size of dataloder to debug_split.
    }
}